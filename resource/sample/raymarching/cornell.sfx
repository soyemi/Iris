#file cornell.sfx
#include include/basis.sfx
#include raymarching.sfx

#GLSL
precision mediump float;


in vec4 aPosition: POSITION_0;
in vec2 aUV: TEXCOORD_0;


inout vec2 vUV: TEXCOORD_0;
inout vec3 vWorldDir: TEXCOORD_1;

void vertex(){
    vec4 pos = aPosition;
    pos.xy *=2.0;
    vUV = aUV;
    gl_Position = pos;

    vec4 wpos = pos;
    wpos.zw = vec2(1.0);
    vWorldDir = mul(MATRIX_INV_P,wpos);
}

out vec4 fragColor: TARGET_0;

void fragment(){

    vec4 worldDir = vWorldDir / vWorldDir.z;
    RAY r;
    r.dir = normalize(i.worldDir);
    r.origin = CAMERA_POS;
    r.IOR = 1.0;

    vec3 finalColor = 0;
    pathTracer(r, 1, finalColor);

    fragColor = vec4(finalColor,1.0);
}

#END

technique pathtracer/cornell{
    #version 300 es
    #pipeline ztest always
    #pipeline zwrite off
    #pipeline queue overlay

    #param vs vertex;
    #param ps fragment;
}